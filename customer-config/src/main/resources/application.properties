server.port= ${PORT:8080}

#kafka connection
spring.kafka.template.default-topic=customer-events
spring.kafka.producer.bootstrap-servers=${KAFKA_SERVERS:kafka-server1:9092, kafka-server2:9093}
spring.kafka.producer.key-serializer= org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer= org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.acks= all
spring.kafka.producer.properties.retries=3
spring.kafka.producer.properties.retry.backoff.ms= 1000
spring.kafka.admin.properties.bootstrap.servers=${KAFKA_SERVERS:kafka-server1:9092, kafka-server2:9093}

#consumer
spring.kafka.consumer.bootstrap-servers=${KAFKA_SERVERS:kafka-server1:9092, kafka-server2:9093}
spring.kafka.consumer.key-deserializer= org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer= org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.group-id= customer-events-listener-group
spring.kafka.consumer.properties.spring.json.trusted.packages=*

#mongo connection
spring.data.mongodb.database=customer
spring.data.mongodb.uri=${DATABASE_URI:mongodb://localhost:27017}